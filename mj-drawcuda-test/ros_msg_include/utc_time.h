// Generated by gencpp from file learning_topic/utc_time.msg
// DO NOT EDIT!


#ifndef LEARNING_TOPIC_MESSAGE_UTC_TIME_H
#define LEARNING_TOPIC_MESSAGE_UTC_TIME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learning_topic
{
template <class ContainerAllocator>
struct utc_time_
{
  typedef utc_time_<ContainerAllocator> Type;

  utc_time_()
    : year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0)  {
    }
  utc_time_(const ContainerAllocator& _alloc)
    : year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0)  {
  (void)_alloc;
    }



   typedef uint16_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _day_type;
  _day_type day;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _min_type;
  _min_type min;

   typedef uint8_t _sec_type;
  _sec_type sec;





  typedef boost::shared_ptr< ::learning_topic::utc_time_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_topic::utc_time_<ContainerAllocator> const> ConstPtr;

}; // struct utc_time_

typedef ::learning_topic::utc_time_<std::allocator<void> > utc_time;

typedef boost::shared_ptr< ::learning_topic::utc_time > utc_timePtr;
typedef boost::shared_ptr< ::learning_topic::utc_time const> utc_timeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learning_topic::utc_time_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learning_topic::utc_time_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learning_topic::utc_time_<ContainerAllocator1> & lhs, const ::learning_topic::utc_time_<ContainerAllocator2> & rhs)
{
  return lhs.year == rhs.year &&
    lhs.month == rhs.month &&
    lhs.day == rhs.day &&
    lhs.hour == rhs.hour &&
    lhs.min == rhs.min &&
    lhs.sec == rhs.sec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learning_topic::utc_time_<ContainerAllocator1> & lhs, const ::learning_topic::utc_time_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learning_topic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::learning_topic::utc_time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_topic::utc_time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_topic::utc_time_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_topic::utc_time_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_topic::utc_time_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_topic::utc_time_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learning_topic::utc_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3843fba00e271822922a8f8f38bef234";
  }

  static const char* value(const ::learning_topic::utc_time_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3843fba00e271822ULL;
  static const uint64_t static_value2 = 0x922a8f8f38bef234ULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_topic::utc_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learning_topic/utc_time";
  }

  static const char* value(const ::learning_topic::utc_time_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learning_topic::utc_time_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 year\n"
"uint8 month\n"
"uint8 day\n"
"uint8 hour\n"
"uint8 min\n"
"uint8 sec\n"
;
  }

  static const char* value(const ::learning_topic::utc_time_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learning_topic::utc_time_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.min);
      stream.next(m.sec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct utc_time_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learning_topic::utc_time_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learning_topic::utc_time_<ContainerAllocator>& v)
  {
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.min);
    s << indent << "sec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARNING_TOPIC_MESSAGE_UTC_TIME_H
