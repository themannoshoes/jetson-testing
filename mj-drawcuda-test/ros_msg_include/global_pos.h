// Generated by gencpp from file learning_topic/global_pos.msg
// DO NOT EDIT!


#ifndef LEARNING_TOPIC_MESSAGE_GLOBAL_POS_H
#define LEARNING_TOPIC_MESSAGE_GLOBAL_POS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learning_topic
{
template <class ContainerAllocator>
struct global_pos_
{
  typedef global_pos_<ContainerAllocator> Type;

  global_pos_()
    : latitude(0.0)
    , longitude(0.0)
    , vel()
    , att()  {
      vel.assign(0.0);

      att.assign(0.0);
  }
  global_pos_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , vel()
    , att()  {
  (void)_alloc;
      vel.assign(0.0);

      att.assign(0.0);
  }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef boost::array<float, 3>  _vel_type;
  _vel_type vel;

   typedef boost::array<float, 3>  _att_type;
  _att_type att;





  typedef boost::shared_ptr< ::learning_topic::global_pos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_topic::global_pos_<ContainerAllocator> const> ConstPtr;

}; // struct global_pos_

typedef ::learning_topic::global_pos_<std::allocator<void> > global_pos;

typedef boost::shared_ptr< ::learning_topic::global_pos > global_posPtr;
typedef boost::shared_ptr< ::learning_topic::global_pos const> global_posConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learning_topic::global_pos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learning_topic::global_pos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learning_topic::global_pos_<ContainerAllocator1> & lhs, const ::learning_topic::global_pos_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.vel == rhs.vel &&
    lhs.att == rhs.att;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learning_topic::global_pos_<ContainerAllocator1> & lhs, const ::learning_topic::global_pos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learning_topic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::learning_topic::global_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_topic::global_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_topic::global_pos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_topic::global_pos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_topic::global_pos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_topic::global_pos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learning_topic::global_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "699cb94257e94ef584610e3928ae5258";
  }

  static const char* value(const ::learning_topic::global_pos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x699cb94257e94ef5ULL;
  static const uint64_t static_value2 = 0x84610e3928ae5258ULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_topic::global_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learning_topic/global_pos";
  }

  static const char* value(const ::learning_topic::global_pos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learning_topic::global_pos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 latitude\n"
"float64 longitude\n"
"float32[3] vel\n"
"float32[3] att\n"
;
  }

  static const char* value(const ::learning_topic::global_pos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learning_topic::global_pos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.vel);
      stream.next(m.att);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct global_pos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learning_topic::global_pos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learning_topic::global_pos_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "att[]" << std::endl;
    for (size_t i = 0; i < v.att.size(); ++i)
    {
      s << indent << "  att[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.att[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARNING_TOPIC_MESSAGE_GLOBAL_POS_H
