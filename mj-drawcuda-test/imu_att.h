// Generated by gencpp from file learning_topic/imu_att.msg
// DO NOT EDIT!


#ifndef LEARNING_TOPIC_MESSAGE_IMU_ATT_H
#define LEARNING_TOPIC_MESSAGE_IMU_ATT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace learning_topic
{
template <class ContainerAllocator>
struct imu_att_
{
  typedef imu_att_<ContainerAllocator> Type;

  imu_att_()
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , roll_sp(0.0)
    , pitch_sp(0.0)
    , yaw_sp(0.0)  {
    }
  imu_att_(const ContainerAllocator& _alloc)
    : roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , roll_sp(0.0)
    , pitch_sp(0.0)
    , yaw_sp(0.0)  {
  (void)_alloc;
    }



   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _roll_sp_type;
  _roll_sp_type roll_sp;

   typedef float _pitch_sp_type;
  _pitch_sp_type pitch_sp;

   typedef float _yaw_sp_type;
  _yaw_sp_type yaw_sp;





  typedef boost::shared_ptr< ::learning_topic::imu_att_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::learning_topic::imu_att_<ContainerAllocator> const> ConstPtr;

}; // struct imu_att_

typedef ::learning_topic::imu_att_<std::allocator<void> > imu_att;

typedef boost::shared_ptr< ::learning_topic::imu_att > imu_attPtr;
typedef boost::shared_ptr< ::learning_topic::imu_att const> imu_attConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::learning_topic::imu_att_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::learning_topic::imu_att_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::learning_topic::imu_att_<ContainerAllocator1> & lhs, const ::learning_topic::imu_att_<ContainerAllocator2> & rhs)
{
  return lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.roll_sp == rhs.roll_sp &&
    lhs.pitch_sp == rhs.pitch_sp &&
    lhs.yaw_sp == rhs.yaw_sp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::learning_topic::imu_att_<ContainerAllocator1> & lhs, const ::learning_topic::imu_att_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace learning_topic

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::learning_topic::imu_att_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::learning_topic::imu_att_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_topic::imu_att_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::learning_topic::imu_att_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_topic::imu_att_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::learning_topic::imu_att_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::learning_topic::imu_att_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d2503ab456eade3a97d8c32f2a0930e";
  }

  static const char* value(const ::learning_topic::imu_att_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d2503ab456eade3ULL;
  static const uint64_t static_value2 = 0xa97d8c32f2a0930eULL;
};

template<class ContainerAllocator>
struct DataType< ::learning_topic::imu_att_<ContainerAllocator> >
{
  static const char* value()
  {
    return "learning_topic/imu_att";
  }

  static const char* value(const ::learning_topic::imu_att_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::learning_topic::imu_att_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 roll        # -90 ~ 90 in degree\n"
"float32 pitch       # -90 ~ 90 in degree\n"
"float32 yaw         # 0 ~ 360 in degree\n"
"\n"
"# attitude setpoint\n"
"float32 roll_sp\n"
"float32 pitch_sp\n"
"float32 yaw_sp\n"
;
  }

  static const char* value(const ::learning_topic::imu_att_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::learning_topic::imu_att_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.roll_sp);
      stream.next(m.pitch_sp);
      stream.next(m.yaw_sp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_att_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::learning_topic::imu_att_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::learning_topic::imu_att_<ContainerAllocator>& v)
  {
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "roll_sp: ";
    Printer<float>::stream(s, indent + "  ", v.roll_sp);
    s << indent << "pitch_sp: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_sp);
    s << indent << "yaw_sp: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_sp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEARNING_TOPIC_MESSAGE_IMU_ATT_H
