/*
 * Copyright (c) 2017, NVIDIA CORPORATION. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <jetson-utils/videoSource.h>
#include <jetson-utils/videoOutput.h>

#include <jetson-utils/cudaFont.h>
#include <jetson-inference/imageNet.h>

#include <signal.h>


//mj testing
// #include <opencv2/imgcodecs.hpp>
// #include <opencv2/highgui.hpp>
// #include <opencv2/imgproc.hpp>
// #include <iostream>

#include <jetson-utils/cudaMappedMemory.h>
#include <jetson-utils/imageIO.h>
#include <jetson-utils/cudaColorspace.h>
#include <jetson-utils/cudaOverlay.h>
#include "mj-draw.h"

#ifdef HEADLESS
	#define IS_HEADLESS() "headless"	// run without display
#else
	#define IS_HEADLESS() (const char*)NULL
#endif

int min_of_them(int a, int b){
	return a < b ? a : b;
} 

__global__ void gpudrawX_mj (uchar3 * img, int width, int height, int n)
{
	uchar3 pixel_temp;
	pixel_temp.x = 0;
	pixel_temp.y = 250;
	pixel_temp.z = 0;

    int i = threadIdx.x;
	int head_x_axis = (width - n )/2;
    if(i < n){
		img[height/2 * width + (head_x_axis + i)] = pixel_temp;

		//two more code below is to add thickness 
		img[(height/2 -1)* width + (head_x_axis + i)] = pixel_temp;
		img[(height/2 +1)* width + (head_x_axis + i)] = pixel_temp;
	}
}

__global__ void gpudrawY_mj (uchar3 * img, int width, int height, int n)
{
	uchar3 pixel_temp;
	pixel_temp.x = 0;
	pixel_temp.y = 250;
	pixel_temp.z = 0;

    int i = threadIdx.x;
	int head_y_axis = (height - n) /2;

	if(i < n){
		img[(i + head_y_axis) * width + width/2] = pixel_temp;

		//two more code below is to add thickness 
		img[(i + head_y_axis) * width + width/2 -1] = pixel_temp;
		img[(i + head_y_axis) * width + width/2 + 1] = pixel_temp;
	}
}

void mj_draw_test(uchar3* img, int width, int height, int cross_len)
{
	if(cross_len > width
	|| cross_len > height){

		cross_len = min_of_them(width, height);
	} 
//	cross_len = 200;
    gpudrawX_mj<<<1, cross_len>>>( img, width, height, cross_len);
	gpudrawY_mj<<<1, cross_len>>>( img, width, height, cross_len);
}


bool signal_recieved = false;

void sig_handler(int signo)
{
	if( signo == SIGINT )
	{
		LogVerbose("received SIGINT\n");
		signal_recieved = true;
	}
}

int usage()
{
	printf("usage: imagenet [--help] [--network=NETWORK] ...\n");
	printf("                input_URI [output_URI]\n\n");
	printf("Classify a video/image stream using an image recognition DNN.\n");
	printf("See below for additional arguments that may not be shown above.\n\n");	
	printf("positional arguments:\n");
	printf("    input_URI       resource URI of input stream  (see videoSource below)\n");
	printf("    output_URI      resource URI of output stream (see videoOutput below)\n\n");

	printf("%s", imageNet::Usage());
	printf("%s", videoSource::Usage());
	printf("%s", videoOutput::Usage());
	printf("%s", Log::Usage());

	return 0;
}

int main( int argc, char** argv )
{

	/*
	 * parse command line
	 */
	commandLine cmdLine(argc, argv, IS_HEADLESS());

	if( cmdLine.GetFlag("help") )
		return usage();


	/*
	 * attach signal handler
	 */
	if( signal(SIGINT, sig_handler) == SIG_ERR )
		LogError("can't catch SIGINT\n");


	/*
	 * create input stream
	 */
	videoSource* input = videoSource::Create(cmdLine, ARG_POSITION(0));

	if( !input )
	{
		LogError("imagenet:  failed to create input stream\n");
		return 0;
	}


	/*
	 * create output stream
	 */
	videoOutput* output = videoOutput::Create(cmdLine, ARG_POSITION(1));
	
	if( !output )
		LogError("imagenet:  failed to create output stream\n");	
	

	/*
	 * create font for image overlay
	 */
	cudaFont* font = cudaFont::Create();
	
	if( !font )
	{
		LogError("imagenet:  failed to load font for overlay\n");
		return 0;
	}



	/********************************************************mj add, *******************************************************/
	uchar3 * img_inA = NULL;
	uchar3 * img_inB = NULL;
	uchar3 * img_out = NULL;
	

	
	//init the dimensionsA & B
	int2  dimsA = make_int2(0,0);
	int2  dimsB = make_int2(0,0);

	//overlay testing...........
	if(!loadImage("images/test/horse_3.jpg", &img_inA, &dimsA.x, &dimsA.y))
	{
		LogError("horse_0 image failed\n");
		return 0;
	}

	if(!loadImage("images/test/horse_0.jpg", &img_inB, &dimsB.x, &dimsB.y))
	{
		LogError("mj load image failed\n");
		return 0;
	}

	if(!cudaAllocMapped(&img_out, dimsA.x, dimsA.y))
	{
		LogError("cudaallocmem for img_out  failed\n");
		return 0;
	}
    


	CUDA(cudaOverlay(img_inA, dimsA, img_out, dimsA, 0, 0));
	/** mj drawing test***/
//	int cross_len = dimsA.x /2;
    mj_draw_test(img_out, dimsA.x, dimsA.y, dimsA.y / 2);

	CUDA(cudaDeviceSynchronize());


	if(!saveImage("images/test/horse_overlay.jpg", img_out, dimsA.x, dimsA.y, 255, make_float2(0,255) ) )
	{
		LogError(" save image  failed\n");
		return 0;	
	}


	/*
	 * processing loop
	 */
	while( !signal_recieved )
	{
		// capture next image image
		uchar3* image = NULL;

		if( !input->Capture(&image, 1000) )
		{
			// check for EOS
			if( !input->IsStreaming() )
				break;

			LogError("imagenet:  failed to capture next frame\n");
			continue;
		}




		if( font != NULL )
		{
			char str1[256];
			sprintf(str1, "MJ testing, first text on cuda");
			font->OverlayText(image, input->GetWidth(), input->GetHeight(),
							str1, 5, input->GetHeight() / 2, make_float4(255, 255, 255, 255), make_float4(0, 0, 0, 100));
		}else{

			LogError("font overlay failed \n");
			continue;
		}

        CUDA(cudaDeviceSynchronize());
//		mj_draw_test(image, input->GetWidth(), input->GetHeight(), input->GetHeight() / 2);


		// render outputs
		if( output != NULL )
		{
			output->Render(image, input->GetWidth(), input->GetHeight());

			// update status bar
			char str[256];
			sprintf(str, "TensorRT %i.%i.%i | 000 | Network 000 FPS", NV_TENSORRT_MAJOR, NV_TENSORRT_MINOR, NV_TENSORRT_PATCH);
			output->SetStatus(str);	

			// check if the user quit
			if( !output->IsStreaming() )
				signal_recieved = true;
		}

	}
	
	/************************************************* mj add: *****************************************************/
    CUDA(cudaDeviceSynchronize());
	CUDA(cudaFreeHost(img_out));

	/*
	 * destroy resources
	 */
	LogVerbose("imagenet:  shutting down...\n");
	
	SAFE_DELETE(input);
	SAFE_DELETE(output);
	
	LogVerbose("imagenet:  shutdown complete.\n");
	return 0;


}

